AWSTemplateFormatVersion: 2010-09-09
Description: ApplicationLoadBalancer EKS for template

Parameters:
  SystemName:
    Type: String
    AllowedPattern: '[a-z0-9-]*'
  EnvType:
    Type: String
    AllowedPattern: '[a-z0-9-]*'
  isCrossZoneLoadBalancing:
    Type: String
    AllowedValues: [true, false]
  isDeletionProtection:
    Type: String
    AllowedValues: [true, false]
  isTlsVersionAndCipherSuite:
    Type: String
    AllowedValues: [true, false]
  isHttp2:
    Type: String
    AllowedValues: [true, false]
  isWafFailOpen:
    Type: String
    AllowedValues: [true, false]
  IdleTimeoutSeconds:
    Type: String
    AllowedPattern: '(?:[1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-3][0-9]{3}|4000)'
  DesyncMitigationMode:
    Type: String
    AllowedValues: [defensive, strictest, monitor]
  isDropInvalidHeaderFields:
    Type: String
    AllowedValues: [true, false]
  XffHeaderProcessing:
    Type: String
    AllowedValues: [append, preserve, remove]
  isXffClientPort:
    Type: String
    AllowedValues: [true, false]
  isPreserveHostHeader:
    Type: String
    AllowedValues: [true, false]
  isAccessLogs:
    Type: String
    AllowedValues: [true, false]
  AccessLogsS3Prefix:
    Type: String
  isConnectionLogs:
    Type: String
    AllowedValues: [true, false]
  ConnectionLogsLogsS3Prefix:
    Type: String
  HealthyThresholdCount:
    Type: String
    AllowedPattern: '(?:[2-9]|10)'
  UnhealthyThresholdCount:
    Type: String
    AllowedPattern: '(?:[2-9]|10)'
  HealthCheckTimeoutSeconds:
    Type: String
    AllowedPattern: '(?:[2-9]|[1-9][0-9]|1[01][0-9]|120)'
  HealthCheckIntervalSeconds:
    Type: String
    AllowedPattern: '(?:[5-9]|[1-9][0-9]|[12][0-9]{2}|300)'
  DeregistrationDelayTimeoutSeconds:
    Type: String
    AllowedPattern: '([0-9]|[1-9][0-9]{1,2}|[12][0-9]{3}|3[0-5][0-9]{2}|3600)'
  LoadBalancingAlgorithm:
    Type: String
    AllowedValues: [round_robin, least_outstanding_requests, weighted_random]
  SlowStartDurationSeconds:
    Type: String
    AllowedPattern: '(?:0|[3-8][0-9]|9[0-9]|[1-8][0-9]{2}|900)'
  isStickiness:
    Type: String
    AllowedValues: [true, false]
  StickinessType:
    Type: String
    AllowedValues: ['', lb_cookie, app_cookie]
  StickinessLbCookieDurationSeconds:
    Type: String
    AllowedPattern: '(?:[1-9]|[1-9][0-9]{0,2}|[1-5][0-9]{3}|[1-5][0-9]{4}|[1-5][0-9]{5}|6[0-4][0-9]{4}|60[0-3][0-9]{3}|604[0-7][0-9]{2}|60480[0-9]|604800)?'
  StickinessAppCookieDurationSeconds:
    Type: String
    AllowedPattern: '(?:[1-9]|[1-9][0-9]{0,2}|[1-5][0-9]{3}|[1-5][0-9]{4}|[1-5][0-9]{5}|6[0-4][0-9]{4}|60[0-3][0-9]{3}|604[0-7][0-9]{2}|60480[0-9]|604800)?'
  StickinessAppCookieName:
    Type: String
  isLoadBalancingCrossZone:
    Type: String
    AllowedValues: [use_load_balancer_configuration, true, false]
  DnsFailoverMinimumHealthyTargetsCount:
    Type: String
    AllowedPattern: '(?:off|[1-9][0-9]{0,2}|[1-4][0-9]{3}|500)'
  DnsFailoverMinimumHealthyTargetsPercentage:
    Type: String
    AllowedPattern: '(?:off|[1-9][0-9]?|100)'
  RroutingMinimumHealthyTargetsCount:
    Type: String
    AllowedPattern: '(?:[1-9][0-9]{0,2}|[1-4][0-9]{3}|500)'
  RroutingMinimumHealthyTargetsPercentage:
    Type: String
    AllowedPattern: '(?:off|[1-9][0-9]?|100)'
  SslSecurityPolicy:
    Type: String
  AcmCertificateArn:
    Type: String

Mappings:
  AzMap:
    ap-northeast-1:
      1st: ap-northeast-1a
      2nd: ap-northeast-1c
      3rd: ap-northeast-1d

Conditions:
  isAccessLogsTrue: !Equals [!Ref isAccessLogs, true]
  hasAccessLogsS3Prefix: !Not [!Equals [!Ref AccessLogsS3Prefix, '']]
  isConnectionLogsTrue: !Equals [!Ref isConnectionLogs, true]
  hasConnectionLogsLogsS3Prefix: !Not [!Equals [!Ref ConnectionLogsLogsS3Prefix, '']]
  hasStickinessType: !Not [!Equals [!Ref StickinessType, '']]
  hasAcmCertificateArn: !Not [!Equals [!Ref AcmCertificateArn, '']]

Resources:
  ApplicationLoadBalancerEks:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: !Sub ${SystemName}-${EnvType}-alb-eks
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - Fn::ImportValue: !Sub ${SystemName}-${EnvType}-subnet-public-1a-id
        - Fn::ImportValue: !Sub ${SystemName}-${EnvType}-subnet-public-1d-id
      SecurityGroups:
        - Fn::ImportValue: !Sub ${SystemName}-${EnvType}-sg-alb-eks-id
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: !Ref isCrossZoneLoadBalancing
        - Key: deletion_protection.enabled
          Value: !Ref isDeletionProtection
        - Key: routing.http.x_amzn_tls_version_and_cipher_suite.enabled
          Value: !Ref isTlsVersionAndCipherSuite
        - Key: routing.http2.enabled
          Value: !Ref isHttp2
        - Key: waf.fail_open.enabled
          Value: !Ref isWafFailOpen
        - Key: idle_timeout.timeout_seconds
          Value: !Ref IdleTimeoutSeconds
        - Key: routing.http.desync_mitigation_mode
          Value: !Ref DesyncMitigationMode
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: !Ref isDropInvalidHeaderFields
        - Key: routing.http.xff_header_processing.mode
          Value: !Ref XffHeaderProcessing
        - Key: routing.http.xff_client_port.enabled
          Value: !Ref isXffClientPort
        - Key: routing.http.preserve_host_header.enabled
          Value: !Ref isPreserveHostHeader
        - Key: access_logs.s3.enabled
          Value: !Ref isAccessLogs
        - !If
          - isAccessLogsTrue
          - Key: access_logs.s3.bucket
            Value: !Sub ${SystemName}-${EnvType}-s3-alb-logs-${AWS::AccountId}-${AWS::Region} # REPLACE_ME
          - !Ref AWS::NoValue
        - !If
          - hasAccessLogsS3Prefix
          - Key: access_logs.s3.prefix
            Value: !Ref AccessLogsS3Prefix
          - !Ref AWS::NoValue
        - Key: connection_logs.s3.enabled
          Value: !Ref isConnectionLogs
        - !If
          - isConnectionLogsTrue
          - Key: connection_logs.s3.bucket
            Value: !Sub ${SystemName}-${EnvType}-s3-alb-logs-${AWS::AccountId}-${AWS::Region} # REPLACE_ME
          - !Ref AWS::NoValue
        - !If
          - hasConnectionLogsLogsS3Prefix
          - Key: connection_logs.s3.prefix
            Value: !Ref AccessLogsS3Prefix
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${EnvType}-alb-eks
        - Key: SystemName
          Value: !Ref SystemName
        - Key: EnvType
          Value: !Ref EnvType

  TargetGroupEks80:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Name: !Sub ${SystemName}-${EnvType}-tg-eks-80
      Protocol: HTTP
      Port: 80
      IpAddressType: ipv4
      VpcId:
        Fn::ImportValue: !Sub ${SystemName}-${EnvType}-vpc-id
      ProtocolVersion: HTTP1
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthyThresholdCount: !Ref HealthyThresholdCount
      UnhealthyThresholdCount: !Ref UnhealthyThresholdCount
      HealthCheckTimeoutSeconds: !Ref HealthCheckTimeoutSeconds
      HealthCheckIntervalSeconds: !Ref HealthCheckIntervalSeconds
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: !Ref DeregistrationDelayTimeoutSeconds
        - Key: load_balancing.algorithm.type
          Value: !Ref LoadBalancingAlgorithm
        - Key: slow_start.duration_seconds
          Value: !Ref SlowStartDurationSeconds
        - Key: stickiness.enabled
          Value: !Ref isStickiness
        - !If
          - hasStickinessType
          - Key: stickiness.type
            Value: !Ref StickinessType
          - !Ref AWS::NoValue
        - !If
          - hasStickinessType
          - Key: stickiness.lb_cookie.duration_seconds
            Value: !Ref StickinessLbCookieDurationSeconds
          - !Ref AWS::NoValue
        - !If
          - hasStickinessType
          - Key: stickiness.app_cookie.duration_seconds
            Value: !Ref StickinessAppCookieDurationSeconds
          - !Ref AWS::NoValue
        - !If
          - hasStickinessType
          - Key: stickiness.app_cookie.cookie_name
            Value: !Ref StickinessAppCookieName
          - !Ref AWS::NoValue
        - Key: load_balancing.cross_zone.enabled
          Value: !Ref isLoadBalancingCrossZone
        - Key: target_group_health.dns_failover.minimum_healthy_targets.count
          Value: !Ref DnsFailoverMinimumHealthyTargetsCount
        - Key: target_group_health.dns_failover.minimum_healthy_targets.percentage
          Value: !Ref DnsFailoverMinimumHealthyTargetsPercentage
        - Key: target_group_health.unhealthy_state_routing.minimum_healthy_targets.count
          Value: !Ref RroutingMinimumHealthyTargetsCount
        - Key: target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage
          Value: !Ref RroutingMinimumHealthyTargetsPercentage
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${EnvType}-tg-eks-80
        - Key: SystemName
          Value: !Ref SystemName
        - Key: EnvType
          Value: !Ref EnvType

  ListenerEks443:
    Condition: hasAcmCertificateArn
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancerEks
      Protocol: HTTPS
      Port: 443
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupEks80
      SslPolicy: !Ref SslSecurityPolicy
      Certificates:
        - CertificateArn: !Ref AcmCertificateArn

  ListenerEks80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancerEks
      Protocol: HTTP
      Port: 80
      DefaultActions: !If
        - hasAcmCertificateArn
        - - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: 443
              StatusCode: HTTP_301
        - - Type: forward
            TargetGroupArn: !Ref TargetGroupEks80
