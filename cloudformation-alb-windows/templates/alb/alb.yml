AWSTemplateFormatVersion: 2010-09-09
Description: ApplicationLoadBalancer for template

Parameters:
  SystemName:
    Type: String
    AllowedPattern: '[a-z0-9-]*'
  EnvType:
    Type: String
    AllowedPattern: '[a-z0-9-]*'
  isTlsVersionAndCipherSuiteEnabled:
    Type: String
    AllowedValues: [true, false]
  isWafFailOpenEnabled:
    Type: String
    AllowedValues: [true, false]
  isHttp2Enabled:
    Type: String
    AllowedValues: [true, false]
  IdleTimeoutSeconds:
    Type: String
    # AllowedValues: [true, false]
  ClientKeepAliveSeconds:
    Type: String
    # AllowedValues: [true, false]
  DesyncMitigationMode:
    Type: String
    # AllowedValues: [true, false]
  XffHeaderProcessingMode:
    Type: String
    # AllowedValues: [true, false]
  isXffClientPortEnabled:
    Type: String
    AllowedValues: [true, false]
  isPreserveHostHeaderEnabled:
    Type: String
    AllowedValues: [true, false]
  isDeletionProtectionEnabled:
    Type: String
    AllowedValues: [true, false]
  isAccessLogsEnabled:
    Type: String
    AllowedValues: [true, false]
  isConnectionLogsEnabled:
    Type: String
    AllowedValues: [true, false]


  HealthyThresholdCount:
    Type: String
    AllowedPattern: '(?:[2-9]|10)'
  UnhealthyThresholdCount:
    Type: String
    AllowedPattern: '(?:[2-9]|10)'
  HealthCheckTimeoutSeconds:
    Type: String
    AllowedPattern: '(?:[2-9]|[1-9][0-9]|1[01][0-9]|120)'
  HealthCheckIntervalSeconds:
    Type: String
    AllowedPattern: '(?:[5-9]|[1-9][0-9]|[12][0-9]{2}|300)'
  isDeregistrationConnectionTermination:
    Type: String
    AllowedValues: [true, false]
  DeregistrationDelayTimeoutSeconds:
    Type: String
    AllowedPattern: '([0-9]|[1-9][0-9]{1,2}|[12][0-9]{3}|3[0-5][0-9]{2}|3600)'
  isProxyProtocolV2:
    Type: String
    AllowedValues: [true, false]
  isPreserveClientIp:
    Type: String
    AllowedValues: [true, false]
  isStickiness:
    Type: String
    AllowedValues: [true, false]
  isLoadBalancingCrossZone:
    Type: String
    AllowedValues: [true, false, use_load_balancer_configuration]
  DnsFailoverMinimumHealthyTargetsCount:
    Type: String
    AllowedPattern: '(?:off|[1-9][0-9]{0,2}|[1-4][0-9]{3}|500)'
  DnsFailoverMinimumHealthyTargetsPercentage:
    Type: String
    AllowedPattern: '(?:off|[1-9][0-9]?|100)'
  RroutingMinimumHealthyTargetsCount:
    Type: String
    AllowedPattern: '(?:[1-9][0-9]{0,2}|[1-4][0-9]{3}|500)'
  RroutingMinimumHealthyTargetsPercentage:
    Type: String
    AllowedPattern: '(?:off|[1-9][0-9]?|100)'
  SslSecurityPolicy:
    Type: String
  NakedCertificateArn:
    Type: String
    Description: If NakedCertificate is not used, leave the value empty.
  WildCertificateArn:
    Type: String

Mappings:
  AzMap:
    ap-northeast-1:
      1st: ap-northeast-1a
      2nd: ap-northeast-1c
      3rd: ap-northeast-1d

Conditions:
  HasNakedCertificateArn: !Not [!Equals [!Ref NakedCertificateArn, '']]

Resources:
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: !Sub ${SystemName}-${EnvType}-alb
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - Fn::ImportValue: !Sub ${SystemName}-${EnvType}-subnet-public-1a-id
        - Fn::ImportValue: !Sub ${SystemName}-${EnvType}-subnet-public-1d-id
      SecurityGroups:
        - Fn::ImportValue: !Sub ${SystemName}-${EnvType}-securitygroup-alb-id
      LoadBalancerAttributes:
        - Key: routing.http.x_amzn_tls_version_and_cipher_suite.enabled
          Value: !Ref isTlsVersionAndCipherSuiteEnabled
        - Key: waf.fail_open.enabled
          Value: !Ref isWafFailOpenEnabled
        - Key: routing.http2.enabled
          Value: !Ref isHttp2Enabled
        - Key: idle_timeout.timeout_seconds
          Value: !Ref IdleTimeoutSeconds
        - Key: client_keep_alive.seconds
          Value: !Ref ClientKeepAliveSeconds
        - Key: routing.http.desync_mitigation_mode
          Value: !Ref DesyncMitigationMode
        - Key: routing.http.xff_header_processing.mode
          Value: !Ref XffHeaderProcessingMode
        - Key: routing.http.xff_client_port.enabled
          Value: !Ref isXffClientPortEnabled
        - Key: routing.http.preserve_host_header.enabled
          Value: !Ref isPreserveHostHeaderEnabled
        - Key: deletion_protection.enabled
          Value: !Ref isDeletionProtectionEnabled
        - Key: access_logs.s3.enabled
          Value: !Ref isAccessLogsEnabled
        # - Key: access_logs.s3.bucket
        #   Value:
        # - Key: access_logs.s3.prefix
        #   Value:
        - Key: connection_logs.s3.enabled
          Value: !Ref isConnectionLogsEnabled
        # - Key: connection_logs.s3.bucket
        #   Value:
        # - Key: connection_logs.s3.prefix
        #   Value:
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${EnvType}-alb
        - Key: SystemName
          Value: !Ref SystemName
        - Key: EnvType
          Value: !Ref EnvType

  ApplicationLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Name: !Sub ${SystemName}-${EnvType}-tg
      VpcId:
        Fn::ImportValue: !Sub ${SystemName}-${EnvType}-vpc-id
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthyThresholdCount: !Ref HealthyThresholdCount
      UnhealthyThresholdCount: !Ref UnhealthyThresholdCount
      HealthCheckTimeoutSeconds: !Ref HealthCheckTimeoutSeconds
      HealthCheckIntervalSeconds: !Ref HealthCheckIntervalSeconds
      # TargetGroupAttributes:
      #   - Key: deregistration_delay.connection_termination.enabled
      #     Value: !Ref isDeregistrationConnectionTermination
      #   - Key: deregistration_delay.timeout_seconds
      #     Value: !Ref DeregistrationDelayTimeoutSeconds
      #   - Key: proxy_protocol_v2.enabled
      #     Value: !Ref isProxyProtocolV2
      #   - Key: preserve_client_ip.enabled
      #     Value: !Ref isPreserveClientIp
      #   - Key: stickiness.enabled
      #     Value: !Ref isStickiness
      #   - Key: load_balancing.cross_zone.enabled
      #     Value: !Ref isLoadBalancingCrossZone
      #   - Key: target_group_health.dns_failover.minimum_healthy_targets.count
      #     Value: !Ref DnsFailoverMinimumHealthyTargetsCount
      #   - Key: target_group_health.dns_failover.minimum_healthy_targets.percentage
      #     Value: !Ref DnsFailoverMinimumHealthyTargetsPercentage
      #   - Key: target_group_health.unhealthy_state_routing.minimum_healthy_targets.count
      #     Value: !Ref RroutingMinimumHealthyTargetsCount
      #   - Key: target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage
      #     Value: !Ref RroutingMinimumHealthyTargetsPercentage
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${EnvType}-tg
        - Key: SystemName
          Value: !Ref SystemName
        - Key: EnvType
          Value: !Ref EnvType

  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup

Outputs:
  ApplicationLoadBalancerFullName:
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
    Export:
      Name: !Sub ${SystemName}-${EnvType}-alb-fullname
  ApplicationLoadBalancerDnsName:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${SystemName}-${EnvType}-alb-dnsname
  ApplicationLoadBalancerHostedzoneid:
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub ${SystemName}-${EnvType}-alb-hostedzoneid
  ApplicationLoadBalancerTargetGroupArn:
    Value: !GetAtt ApplicationLoadBalancerTargetGroup.TargetGroupArn
    Export:
      Name: !Sub ${SystemName}-${EnvType}-tg-arn
  ApplicationLoadBalancerTargetGroupFullName:
    Value: !GetAtt ApplicationLoadBalancerTargetGroup.TargetGroupFullName
    Export:
      Name: !Sub ${SystemName}-${EnvType}-tg-fullname
